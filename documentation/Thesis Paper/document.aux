\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\bibstyle{apalike}
\citation{farosProposal}
\@writefile{toc}{\contentsline {section}{\numberline {1}Master Thesis Objective}{3}{section.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Proposal}{3}{subsection.1.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}Concept}{4}{subsection.1.2}}
\newlabel{sec:concept}{{1.2}{4}{Concept}{subsection.1.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}Project Requirements}{4}{subsection.1.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.3.1}Constraints}{4}{subsubsection.1.3.1}}
\newlabel{sec:constraints}{{1.3.1}{4}{Constraints}{subsubsection.1.3.1}{}}
\citation{JavaEELandscape73:online}
\citation{DeveloperSurvey95:online}
\citation{SpringBootAdvantages67:online}
\citation{SpringBootIntro23:online}
\citation{WhyMicroservices48:online}
\citation{JavaEESecurity29:online}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.3.2}Design focus}{5}{subsubsection.1.3.2}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Research and Methodology}{5}{section.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Approach}{5}{subsection.2.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Java Enterprise Landscape}{5}{subsection.2.2}}
\newlabel{sec:javalandscape}{{2.2}{5}{Java Enterprise Landscape}{subsection.2.2}{}}
\citation{GradleVsMaven48:online}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Comparison of technologies}{7}{subsection.2.3}}
\newlabel{sec:comparison}{{2.3}{7}{Comparison of technologies}{subsection.2.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.1}IDE's and build tools}{7}{subsubsection.2.3.1}}
\newlabel{sec:idebuild}{{2.3.1}{7}{IDE's and build tools}{subsubsection.2.3.1}{}}
\citation{SpringMicroservices35:online}
\citation{MicroservicesFrameworks85:online}
\citation{MongodbVsMySQL92:online}
\citation{sharding93:online}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.2}General framework}{8}{subsubsection.2.3.2}}
\newlabel{sec:framework}{{2.3.2}{8}{General framework}{subsubsection.2.3.2}{}}
\citation{ormNosql85:online}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.3}Persistence providers}{9}{subsubsection.2.3.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.4}Object relational mapping tools}{9}{subsubsection.2.3.4}}
\citation{JavaEESecurity29:online}
\citation{SpringCloudSecurity52:online}
\citation{ApiGateway28:online}
\citation{MicroservicesApiGateway87:online}
\citation{MicroservicesFrameworks85:online}
\citation{MicroservicesProandCons72:online}
\citation{MicroservicePatterns25:online}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.5}Security systems}{10}{subsubsection.2.3.5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.6}Front-end and Styling frameworks}{10}{subsubsection.2.3.6}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.7}Application architecture and micro-services}{10}{subsubsection.2.3.7}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces \textit  {Api gateway design pattern: The Api Gateway pattern shows a way to allow access to the various services running in the back-end via a central gateway. }\relax }}{11}{figure.1}}
\newlabel{fig:apigateway}{{1}{11}{\textit {Api gateway design pattern: The Api Gateway pattern shows a way to allow access to the various services running in the back-end via a central gateway. }\relax }{figure.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Application Implementation}{11}{section.3}}
\newlabel{sec:implementation}{{3}{11}{Application Implementation}{section.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Case study summary}{12}{subsection.3.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Development Process}{12}{subsection.3.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces \textit  {Original MySQL datastructure: This image shows the prototype relational model we used while working with a single SQL database}\relax }}{12}{figure.2}}
\newlabel{fig:sqldiagram}{{2}{12}{\textit {Original MySQL datastructure: This image shows the prototype relational model we used while working with a single SQL database}\relax }{figure.2}{}}
\citation{ComponentAnnotationDifferences34:online}
\citation{ServiceAnnotationSpring48:online}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces \textit  {Initial project structure: The application is accessed by a browser client. All the services are part of one big Java application and use a relational database to store data.}\relax }}{13}{figure.3}}
\newlabel{fig:projectstructure1}{{3}{13}{\textit {Initial project structure: The application is accessed by a browser client. All the services are part of one big Java application and use a relational database to store data.}\relax }{figure.3}{}}
\citation{NetflixZuul76:online}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces \textit  {Project structure after splitting into separate modules: Instead of the single monolithic application, the project now has a separate module for each service. Each module consists of an REST access point, a service that handles the REST calls and an individual database. This database can use SQL or NoSQL depending on the data it contains.}\relax }}{15}{figure.4}}
\newlabel{fig:microservicessplit}{{4}{15}{\textit {Project structure after splitting into separate modules: Instead of the single monolithic application, the project now has a separate module for each service. Each module consists of an REST access point, a service that handles the REST calls and an individual database. This database can use SQL or NoSQL depending on the data it contains.}\relax }{figure.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces \textit  {Discovery design: Each time a service is started, it will register itself to the Eureka server. This can be do multiple times for the same service. The eureka server can then be consulted to get the addresses of the required services. After getting the information, the service can be addressed directly with REST Api calls. Services will need to send a heartbeat to the discovery server regularly, or they will be unregistered.}\relax }}{16}{figure.5}}
\newlabel{fig:discovery}{{5}{16}{\textit {Discovery design: Each time a service is started, it will register itself to the Eureka server. This can be do multiple times for the same service. The eureka server can then be consulted to get the addresses of the required services. After getting the information, the service can be addressed directly with REST Api calls. Services will need to send a heartbeat to the discovery server regularly, or they will be unregistered.}\relax }{figure.5}{}}
\citation{Gloriafood:online}
\citation{Chownow:online}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces \textit  {Final project structure: The application server will now consult the Eureka server to find running instances of the services it needs. Each service can have multiple instances registered on the eureka service.}\relax }}{17}{figure.6}}
\newlabel{fig:projectstructure3}{{6}{17}{\textit {Final project structure: The application server will now consult the Eureka server to find running instances of the services it needs. Each service can have multiple instances registered on the eureka service.}\relax }{figure.6}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Case study: Online cash register}{17}{section.4}}
\newlabel{sec:casestudy}{{4}{17}{Case study: Online cash register}{section.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Introduction}{17}{subsection.4.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Existing systems}{17}{subsection.4.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Use Cases}{17}{subsection.4.3}}
\@writefile{toc}{\contentsline {paragraph}{Customer}{17}{subsection.4.3}}
\@writefile{toc}{\contentsline {paragraph}{Waiter}{18}{subsection.4.3}}
\@writefile{toc}{\contentsline {paragraph}{Chef}{18}{subsection.4.3}}
\@writefile{toc}{\contentsline {paragraph}{Manager}{18}{subsection.4.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces \textit  {Use Case Diagram: This diagram shows the actions each actor can undertaken when interacting with the application. Customers can do basic actions like viewing the menu, ordering food and paying for it. Employees can see the order overview and modify the menu in addition to the basic actions. Managers can register employees and the Administrator can create accounts for managers and assign them to a restaurant.}\relax }}{18}{figure.7}}
\newlabel{fig:usecase}{{7}{18}{\textit {Use Case Diagram: This diagram shows the actions each actor can undertaken when interacting with the application. Customers can do basic actions like viewing the menu, ordering food and paying for it. Employees can see the order overview and modify the menu in addition to the basic actions. Managers can register employees and the Administrator can create accounts for managers and assign them to a restaurant.}\relax }{figure.7}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4}Must-haves and nice-to haves}{18}{subsection.4.4}}
\@writefile{toc}{\contentsline {paragraph}{Must-Haves}{18}{subsection.4.4}}
\@writefile{toc}{\contentsline {paragraph}{Nice-to-Haves}{18}{subsection.4.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.5}Design Choices}{19}{subsection.4.5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.5.1}Client}{19}{subsubsection.4.5.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.5.2}Employee}{19}{subsubsection.4.5.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces \textit  {Example Order Overview: The order overview has the names and amount of items ordered. It also specifies the table which made the order. Finally, it indicates the current status of the order, making the distinction between orders just placed, and orders already processed in the kitchen}\relax }}{20}{figure.8}}
\newlabel{fig:orderview}{{8}{20}{\textit {Example Order Overview: The order overview has the names and amount of items ordered. It also specifies the table which made the order. Finally, it indicates the current status of the order, making the distinction between orders just placed, and orders already processed in the kitchen}\relax }{figure.8}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces \textit  {Customer Menu Layout: For customers the layout should be intuitive and complete. Menu items are listed with their full name and price. A checkbox is used to select food for ordering. A field for filling in the amount would also be useful. This layout could also have an extended discription of the item as well as pictures for showcasing.} \relax }}{20}{figure.9}}
\newlabel{fig:menucustomer}{{9}{20}{\textit {Customer Menu Layout: For customers the layout should be intuitive and complete. Menu items are listed with their full name and price. A checkbox is used to select food for ordering. A field for filling in the amount would also be useful. This layout could also have an extended discription of the item as well as pictures for showcasing.} \relax }{figure.9}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces \textit  {Waiter Menu Layout: The menu layout for employees should be different because visuals and intuitiveness are not the most important factors here. Instead, this layout should have as much items as possible on one screen without affecting usability. The items can use shorthand names and should always load in the same position to allow for easy memorisation.}\relax }}{20}{figure.10}}
\newlabel{fig:waitercustomer}{{10}{20}{\textit {Waiter Menu Layout: The menu layout for employees should be different because visuals and intuitiveness are not the most important factors here. Instead, this layout should have as much items as possible on one screen without affecting usability. The items can use shorthand names and should always load in the same position to allow for easy memorisation.}\relax }{figure.10}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.5.3}Manager}{21}{subsubsection.4.5.3}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Results}{22}{section.5}}
\newlabel{sec:results}{{5}{22}{Results}{section.5}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}Final Prototype}{22}{subsection.5.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces Application diagram\relax }}{22}{figure.11}}
\newlabel{fig:applicationdiagram}{{11}{22}{Application diagram\relax }{figure.11}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2}Possible Improvements}{22}{subsection.5.2}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Conclusion}{23}{section.6}}
\bibdata{document}
\bibcite{ComponentAnnotationDifferences34:online}{Com, 2015}
\bibcite{MongodbVsMySQL92:online}{Mon, 2017}
\bibcite{MicroservicesProandCons72:online}{Badola, 2015}
\bibcite{Chownow:online}{Chownow, 2017}
\bibcite{MicroservicesFrameworks85:online}{Delmas, 2015}
\bibcite{SpringBootAdvantages67:online}{Dinesh, 2016}
\bibcite{farosProposal}{Faros, 2016}
\bibcite{Gloriafood:online}{Gloriafood, 2017}
\bibcite{GradleVsMaven48:online}{Gradle, 2017}
\bibcite{MicroservicePatterns25:online}{Gupta, 2017a}
\bibcite{WhyMicroservices48:online}{Gupta, 2017b}
\bibcite{ServiceAnnotationSpring48:online}{Hoeller, 2017}
\bibcite{JavaEELandscape73:online}{Maple, 2016}
\bibcite{sharding93:online}{Narumoto, 2017}
\bibcite{NetflixZuul76:online}{Netflix, 2017}
\bibcite{MicroservicesApiGateway87:online}{Nommensen, 2015}
\@writefile{toc}{\contentsline {section}{\numberline {7}References}{24}{section.7}}
\bibcite{JavaEESecurity29:online}{Oracle, 2013}
\bibcite{SpringCloudSecurity52:online}{Pivotal, 2017}
\bibcite{ApiGateway28:online}{Richardson, 2017}
\bibcite{SpringMicroservices35:online}{Shelajev, 2016}
\bibcite{ormNosql85:online}{Singh, 2013}
\bibcite{DeveloperSurvey95:online}{Stackoverflow, 2017}
\bibcite{SpringBootIntro23:online}{Webb, 2013}
\@writefile{toc}{\contentsline {section}{\numberline {8}Appendix}{26}{section.8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.1}List of technologies used}{26}{subsection.8.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.2}Problems and their solutions}{27}{subsection.8.2}}
\@writefile{toc}{\contentsline {paragraph}{Problems with database model foreign keys}{27}{subsection.8.2}}
\@writefile{toc}{\contentsline {paragraph}{Thymeleaf-related issues}{27}{subsection.8.2}}
\@writefile{toc}{\contentsline {paragraph}{HttpRequest POST problems}{28}{subsection.8.2}}
\newlabel{iss:mavenrepo}{{8.2}{28}{HttpRequest POST problems}{subsection.8.2}{}}
